C51 COMPILER V9.56.0.0   MAIN                                                              04/05/2025 23:19:42 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Keilv5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /* 头文件声明区 */
   2          #include <STC15F2K60S2.H>
   3          #include <Led.h>
   4          #include <Seg.h>
   5          #include <Key.h>
   6          #include <intrins.h>
   7          #include <ds1302.h>
   8          #include <iic.h>
   9          
  10          
  11          
  12          /* 变量声明区*/
  13          unsigned char Key_Up,Key_Down,Key_Old,Key_Val;
  14          unsigned int Key_Slow_Down,Seg_Slow_Down;
  15          unsigned char Seg_Pos;
  16          unsigned char Seg_Buf[8] = {10,10,10,10,10,10,10,10};
  17          unsigned char Seg_Point[8] = {0,0,0,0,0,0,0,0};
  18          unsigned char ucLed[8] = {0,0,0,0,0,0,0,0};
  19          unsigned char Rtc[3] = {0x23,0x59,0x50};//时间
  20          
  21          unsigned char Sys_Mode;//0时间 1数据 2历史
  22          
  23          float V_Data;
  24          float R_Data;
  25          
  26          unsigned char Index = 0;
  27          unsigned char Index_Time[3][3];
  28          
  29          bit Trigger ;//触发标志
  30          bit Trigger_hold;//持续触发标志
  31          unsigned Trigger_Time[3];
  32          unsigned int Timer_3000ms;
  33          
  34          void Seg_Reset()
  35          {
  36   1        unsigned char i = 0;
  37   1        for(i = 0;i<8;i++)
  38   1          {
  39   2            Seg_Buf[i] = 10;
  40   2            Seg_Point[i] = 0;
  41   2          }
  42   1      }
  43          
  44          void Tag_Reset()
  45          {
  46   1        unsigned char i = 0;
  47   1        unsigned char a = 0;
  48   1        for(i = 0;i<3;i++)
  49   1        {
  50   2          for(a = 0; a < 3; a++)
  51   2          {
  52   3            Index_Time[i][a] = 0;
  53   3          }
  54   2        }
C51 COMPILER V9.56.0.0   MAIN                                                              04/05/2025 23:19:42 PAGE 2   

  55   1      }
  56          /* 键盘处理函数 */
  57          void Key_Proc()
  58          {
  59   1        if(Key_Slow_Down) return;
  60   1        Key_Slow_Down = 1;
  61   1        
  62   1        Key_Val = Key_Read();
  63   1        Key_Down = Key_Val & (Key_Val ^ Key_Old);
  64   1        Key_Up =~Key_Val & (Key_Val ^ Key_Old);
  65   1        Key_Old = Key_Val;//持续按下
  66   1        
  67   1        switch(Key_Down)
  68   1        {
  69   2          case 4:
  70   2            Seg_Reset();
  71   2            Index = 1;
  72   2            if(++Sys_Mode > 2)
  73   2              Sys_Mode = 0;
  74   2          break;
  75   2          case 5:
  76   2            if(++Index >3)
  77   2              Index = 1;
  78   2          break;
  79   2          case 8:
  80   2            Tag_Reset();
  81   2          break;
  82   2        }
  83   1      }
  84          
  85          /* 信息处理函数 */
  86          void Seg_Proc()
  87          {
  88   1        unsigned char i;
  89   1        
  90   1        if(Seg_Slow_Down) return;
  91   1        Seg_Slow_Down = 1;
  92   1        
  93   1        Read_Rtc(Rtc);
  94   1        R_Data = Ad_Read(0x01) / 51.0;  
  95   1        R_Data = Ad_Read(0x01) / 51.0;  
  96   1        V_Data = Ad_Read(0x03) / 51.0;
  97   1        V_Data = Ad_Read(0x03) / 51.0;
  98   1      
  99   1        if(Trigger)
 100   1        {
 101   2          Seg_Buf[0] = Seg_Buf[1] = 18;
 102   2          Seg_Buf[2] = Trigger_Time[0] / 16 % 16;
 103   2          Seg_Buf[3] = Trigger_Time[0]  % 16;
 104   2          Seg_Buf[4] = Trigger_Time[1] / 16 % 16;
 105   2          Seg_Buf[5] = Trigger_Time[1]  % 16;
 106   2          Seg_Buf[6] = Trigger_Time[2] / 16 % 16;
 107   2          Seg_Buf[7] = Trigger_Time[2]  % 16;
 108   2        }
 109   1        else
 110   1        {
 111   2          switch(Sys_Mode)
 112   2          {
 113   3            case 0:
 114   3              Seg_Buf[0] = Rtc[0] / 16 % 16;
 115   3              Seg_Buf[1] = Rtc[0]  % 16;
 116   3              Seg_Buf[3] = Rtc[1] / 16 % 16;
C51 COMPILER V9.56.0.0   MAIN                                                              04/05/2025 23:19:42 PAGE 3   

 117   3              Seg_Buf[4] = Rtc[1]  % 16;
 118   3              Seg_Buf[6] = Rtc[2] / 16 % 16;
 119   3              Seg_Buf[7] = Rtc[2]  % 16;
 120   3              Seg_Buf[2] = Seg_Buf[5] = 11;
 121   3            break;
 122   3            case 1:
 123   3              Seg_Buf[0] = 12;
 124   3              Seg_Buf[4] = 17;
 125   3              
 126   3              Seg_Buf[1] = (unsigned char)R_Data %10;
 127   3              Seg_Buf[2] = (unsigned int)(R_Data * 10) %10;
 128   3              Seg_Buf[3] = (unsigned int)(R_Data * 100) %10;
 129   3              Seg_Point[1] = 1;
 130   3            
 131   3              Seg_Buf[5] = (unsigned int)V_Data %10;
 132   3              Seg_Buf[6] = (unsigned int)(V_Data * 10) %10;
 133   3              Seg_Buf[7] = (unsigned int)(V_Data * 100) %10;
 134   3              Seg_Point[5] = 1;
 135   3            break;
 136   3            case 2:
 137   3              Seg_Buf[0] = 15;
 138   3              Seg_Buf[1] = Index;
 139   3              
 140   3              if(Index == 1)
 141   3              {
 142   4                if(Index_Time[0][0] == 0 && Index_Time[0][1] == 0 && Index_Time[0][2] == 0)
 143   4                  Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = Seg_Buf[5] = Seg_Buf[6] = Seg_Buf[7] = 11;
 144   4                else
 145   4                {
 146   5                  Seg_Buf[2] = Index_Time[0][0] / 16 % 16;
 147   5                  Seg_Buf[3] = Index_Time[0][0]  % 16;
 148   5                  Seg_Buf[4] = Index_Time[0][1] / 16 % 16;
 149   5                  Seg_Buf[5] = Index_Time[0][1]  % 16;
 150   5                  Seg_Buf[6] = Index_Time[0][2] / 16 % 16;
 151   5                  Seg_Buf[7] = Index_Time[0][2]  % 16;
 152   5                }
 153   4              }
 154   3              if(Index == 2)
 155   3              {
 156   4                if(Index_Time[1][0] == 0 && Index_Time[1][1] == 0 && Index_Time[1][2] == 0)
 157   4                  Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = Seg_Buf[5] = Seg_Buf[6] = Seg_Buf[7] = 11;
 158   4                else
 159   4                {
 160   5                  Seg_Buf[2] = Index_Time[1][0] / 16 % 16;
 161   5                  Seg_Buf[3] = Index_Time[1][0]  % 16;
 162   5                  Seg_Buf[4] = Index_Time[1][1] / 16 % 16;
 163   5                  Seg_Buf[5] = Index_Time[1][1]  % 16;
 164   5                  Seg_Buf[6] = Index_Time[1][2] / 16 % 16;
 165   5                  Seg_Buf[7] = Index_Time[1][2]  % 16;
 166   5                }
 167   4              }
 168   3              if(Index == 3)
 169   3              {
 170   4                if(Index_Time[2][0] == 0 && Index_Time[2][1] == 0 && Index_Time[2][2] == 0)
 171   4                  Seg_Buf[2] = Seg_Buf[3] = Seg_Buf[4] = Seg_Buf[5] = Seg_Buf[6] = Seg_Buf[7] = 11;
 172   4                else
 173   4                {
 174   5                  Seg_Buf[2] = Index_Time[2][0] / 16 % 16;
 175   5                  Seg_Buf[3] = Index_Time[2][0]  % 16;
 176   5                  Seg_Buf[4] = Index_Time[2][1] / 16 % 16;
 177   5                  Seg_Buf[5] = Index_Time[2][1]  % 16;
 178   5                  Seg_Buf[6] = Index_Time[2][2] / 16 % 16;
C51 COMPILER V9.56.0.0   MAIN                                                              04/05/2025 23:19:42 PAGE 4   

 179   5                  Seg_Buf[7] = Index_Time[2][2]  % 16;
 180   5                }
 181   4              }
 182   3            break;
 183   3          }
 184   2        }
 185   1        
 186   1        /* 数据处理函数 */  
 187   1        if(R_Data<V_Data && Timer_3000ms == 0 && Trigger_hold == 1)//触发切换
 188   1        {
 189   2          Seg_Reset();
 190   2          Trigger ^= 1;
 191   2          Trigger_hold = 0;
 192   2          
 193   2          Trigger_Time[0] = Rtc[0];
 194   2          Trigger_Time[1] = Rtc[1];
 195   2          Trigger_Time[2] = Rtc[2];
 196   2          
 197   2          for(i = 0; i<3; i++)
 198   2          {
 199   3            Index_Time[2][i] = Index_Time[1][i];
 200   3          }
 201   2          
 202   2          for(i = 0; i<3; i++)
 203   2          {
 204   3            Index_Time[1][i] = Index_Time[0][i];
 205   3          }
 206   2          
 207   2          for(i = 0; i<3; i++)
 208   2          {
 209   3            Index_Time[0][i] = Rtc[i];
 210   3          }
 211   2        }
 212   1        
 213   1        if(V_Data < R_Data)
 214   1          Trigger_hold = 1;
 215   1      
 216   1      }
 217          /* 其他显示函数*/
 218          void Led_Proc()
 219          {
 220   1        ucLed[0] = (Sys_Mode == 0 && Trigger == 0)? 1 : 0;
 221   1        ucLed[1] = (Sys_Mode == 1 && Trigger == 0)? 1 : 0;
 222   1        ucLed[2] = (Sys_Mode == 2 && Trigger == 0)? 1 : 0;
 223   1        ucLed[7] = Trigger;
 224   1      }
 225          
 226          /* 中断服务函数 */
 227          void Timer0_Server() interrupt 1
 228          {
 229   1        if(++Key_Slow_Down == 10) Key_Slow_Down = 0;
 230   1        if(++Seg_Slow_Down == 100) Seg_Slow_Down = 0;
 231   1        if(++Seg_Pos == 8) Seg_Pos = 0;
 232   1        Seg_Disp(Seg_Pos,Seg_Buf[Seg_Pos],Seg_Point[Seg_Pos]);
 233   1        Led_Disp(Seg_Pos,ucLed[Seg_Pos]);
 234   1      
 235   1        if(Trigger == 1)
 236   1        {
 237   2          ++Timer_3000ms;
 238   2          if(Timer_3000ms == 3000)
 239   2          {
 240   3            Timer_3000ms = 0;
C51 COMPILER V9.56.0.0   MAIN                                                              04/05/2025 23:19:42 PAGE 5   

 241   3            Trigger = 0;
 242   3          }
 243   2        }
 244   1      }
 245          
 246          
 247          /* 定时器初始化函数 */
 248          void Timer0_Init(void)    //1毫秒@12.000MHz
 249          {
 250   1        AUXR &= 0x7F;     //定时器时钟12T模式
 251   1        TMOD &= 0xF0;     //设置定时器模式
 252   1        TL0 = 0x18;       //设置定时初始值
 253   1        TH0 = 0xFC;       //设置定时初始值
 254   1        TF0 = 0;        //清除TF0标志
 255   1        TR0 = 1;        //定时器0开始计时
 256   1        ET0 = 1;        //中断定时器0打开
 257   1        EA = 1;         //总中断打开
 258   1      }
 259          
 260          
 261          /* Main */
 262          void main()
 263          {
 264   1        Timer0_Init();//定时器初始化
 265   1        Set_Rtc(Rtc);//设置时间
 266   1        
 267   1        while(1)
 268   1        {
 269   2          Seg_Proc();
 270   2          Key_Proc();
 271   2          Led_Proc();   
 272   2        }
 273   1      }
 274          
 275          
 276          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1219    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     63    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
