C51 COMPILER V9.56.0.0   MAIN                                                              04/08/2025 23:21:44 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Keilv5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /***************************************************************************************
   2          * Copyright (C) 2025 米醋电子工作室
   3          *
   4          * 版本         ：V4T
   5          * 作者         ：米醋电子工作室
   6          * 描述         ：该版本为V2版本的改进版，针对4T平台做了专项优化，修复了此前版本的若干Bug
   7          *
   8          * 版权归米醋电子工作室所有，并保留所有权力。
   9          * 未经明确书面许可，任何个人或机构不得擅自用于商业用途。
  10          ***********************************************************************************************/
  11          
  12          /* 头文件声明区 */
  13          #include <STC15F2K60S2.H>//单片机寄存器专用头文件
  14          #include <Init.h>//初始化底层驱动专用头文件
  15          #include <Led.h>//Led底层驱动专用头文件
  16          #include <Key.h>//按键底层驱动专用头文件
  17          #include <Seg.h>//数码管底层驱动专用头文件
  18          #include <Uart.h>//串口底层驱动专用头文件
  19          #include <string.h>
  20          /* 变量声明区 */
  21          unsigned char Key_Val,Key_Down,Key_Old,Key_Up;//按键专用变量
  22          unsigned char Key_Slow_Down;//按键减速专用变量
  23          unsigned char Seg_Buf[8] = {10,10,10,10,10,10,10,10};//数码管显示数据存放数组
  24          unsigned char Seg_Pos;//数码管扫描专用变量
  25          idata unsigned int Seg_Slow_Down;//数码管减速专用变量
  26          idata unsigned char ucLed[8] = {0,0,0,0,0,0,0,0};//Led显示数据存放数组
  27          idata unsigned char Uart_Recv[10];//串口接收数据储存数组 默认10个字节 若接收数据较长 可更改最大字节数
  28          idata unsigned char Uart_Recv_Index;//串口接收数组指针
  29          
  30          /* 串口数据 */
  31          idata unsigned char Uart_Recv_Tick;     // 串口接收时间标志
  32          idata unsigned char Uart_Rx_Flag;
  33          /* 键盘处理函数 */
  34          void Key_Proc()
  35          {
  36   1          if(Key_Slow_Down<10) return;
  37   1          Key_Slow_Down = 0;//键盘减速程序
  38   1      
  39   1          Key_Val = Key_Read();//实时读取键码值
  40   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);//捕捉按键下降沿
  41   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);//捕捉按键上降沿
  42   1          Key_Old = Key_Val;//辅助扫描变量
  43   1      
  44   1      }
  45          
  46          /* 信息处理函数 */
  47          void Seg_Proc()
  48          {
  49   1          if(Seg_Slow_Down<500) return;
  50   1          Seg_Slow_Down = 0;//数码管减速程序
  51   1      
  52   1      
  53   1      }
  54          
C51 COMPILER V9.56.0.0   MAIN                                                              04/08/2025 23:21:44 PAGE 2   

  55          /* 其他显示函数 */
  56          void Led_Proc()
  57          {
  58   1      }
  59          
  60          /* 串口处理函数 */
  61          void Uart_Proc()
  62          {
  63   1          unsigned char i;
  64   1          if (Uart_Recv_Index == 0) return; // 无数据，直接返回
  65   1          if (Uart_Recv_Tick >= 10)
  66   1          { // 若接收超时，对数据读取，清空缓存区
  67   2              Uart_Rx_Flag = 0;
  68   2              Uart_Recv_Tick = 0;
  69   2              
  70   2              if(Uart_Recv_Index == 8)
  71   2              {
  72   3                for(i = 0; i<8; i++)
  73   3                {
  74   4                  Seg_Buf[i] = Uart_Recv[i] - 48;
  75   4                  ucLed[i] = (Uart_Recv[i] - 48) == 1 ? 0 : 1;
  76   4                }
  77   3              }
  78   2              
  79   2              memset(Uart_Recv, 0, Uart_Recv_Index); // 清空接收数据
  80   2              Uart_Recv_Index = 0;
  81   2          }
  82   1          
  83   1      
  84   1      }
  85          
  86          /* 定时器0中断初始化函数 */
  87          void Timer0Init(void)   //1毫秒@12.000MHz
  88          {
  89   1          AUXR &= 0x7F;   //定时器时钟12T模式
  90   1          TMOD &= 0xF0;   //设置定时器模式
  91   1          TL0 = 0x18;   //设置定时初始值
  92   1          TH0 = 0xFC;   //设置定时初始值
  93   1          TF0 = 0;    //清除TF0标志
  94   1          TR0 = 1;    //定时器0开始计时
  95   1          ET0 = 1;    //定时器中断0打开
  96   1          EA = 1;     //总中断打开
  97   1      }
  98          
  99          /* 定时器0中断服务函数 */
 100          void Timer0Server() interrupt 1
 101          {  
 102   1          Key_Slow_Down ++;
 103   1          Seg_Slow_Down ++;
 104   1      
 105   1          if(++Seg_Pos == 8) Seg_Pos = 0;//数码管显示专用
 106   1           // 数码管显示处理
 107   1          if (Seg_Buf[Seg_Pos] > 20)
 108   1              Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos] - ',', 1); // 带小数点
 109   1          else
 110   1              Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], 0); // 无小数点
 111   1          
 112   1          Led_Disp(ucLed); 
 113   1          
 114   1          if(Uart_Rx_Flag == 1)
 115   1              Uart_Recv_Tick ++;
 116   1      }
C51 COMPILER V9.56.0.0   MAIN                                                              04/08/2025 23:21:44 PAGE 3   

 117          
 118          /* 串口1中断服务函数 */
 119          void Uart1Server() interrupt 4
 120          {
 121   1          if(RI == 1) //串口接收数据
 122   1          {
 123   2              Uart_Rx_Flag = 1;
 124   2              Uart_Recv_Tick = 0;
 125   2              Uart_Recv[Uart_Recv_Index] = SBUF;
 126   2              Uart_Recv_Index++;
 127   2              RI = 0;
 128   2              if(Uart_Recv_Index>10)
 129   2              {
 130   3                  Uart_Recv_Index = 0;
 131   3                  memset(Uart_Recv,0,10);
 132   3              }
 133   2          }
 134   1      }
 135          
 136          /* Main */
 137          void main()
 138          {
 139   1          System_Init();
 140   1          Uart_Init();
 141   1          Timer0Init();
 142   1          while (1)
 143   1          {
 144   2              Key_Proc();
 145   2              Seg_Proc();
 146   2              Led_Proc();
 147   2              Uart_Proc();
 148   2          }
 149   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    428    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14    ----
   IDATA SIZE       =     23    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
